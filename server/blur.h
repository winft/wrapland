/********************************************************************
Copyright 2020  Faveraux Adrien <ad1rie3@hotmail.fr>

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) version 3, or any
later version accepted by the membership of KDE e.V. (or its
successor approved by the membership of KDE e.V.), which shall
act as a proxy defined in Section 6 of version 3 of the license.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library.  If not, see <http://www.gnu.org/licenses/>.
*********************************************************************/
#pragma once

#include <QObject>

#include <Wrapland/Server/wraplandserver_export.h>

namespace Wrapland::Server
{

class D_isplay;
class Client;

/**
 * @brief Represents the Global for org_kde_kwin_blur_manager interface.
 *
 * This class creates Blurs and attaches them to SurfaceInterfaces.
 *
 * @see Blur
 * @see SurfaceInterface
 **/
class WRAPLANDSERVER_EXPORT BlurManager : public QObject
{
    Q_OBJECT
public:
    ~BlurManager() override;

private:
    explicit BlurManager(D_isplay* display, QObject* parent = nullptr);
    friend class D_isplay;
    class Private;
    std::unique_ptr<Private> d_ptr;
};

/**
 * @brief Represents the Resource for the org_kde_kwin_blur interface.
 *
 * Instances of this class are only generated by the BlurManager.
 * The Blur gets attached to a SurfaceInterface and can be assessed
 * from there using @link SurfaceInterface::blur() @endlink. Please note that
 * the Blur is only available on the SurfaceInterface after it has been
 * committed.
 *
 * @see BlurManager
 * @see Surface
 **/
class WRAPLANDSERVER_EXPORT Blur : public QObject
{
    Q_OBJECT
public:
    ~Blur() override;

    /**
     * @returns The region or the SurfaceInterface which should be blurred, null Region implies
     *complete surface.
     **/
    QRegion region();

Q_SIGNALS:
    void resourceDestroyed();

private:
    explicit Blur(Client* client, uint32_t version, uint32_t id);
    friend class BlurManager;

    class Private;
    Private* d_ptr;
};

}
