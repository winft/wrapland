stages:
  - Compliance
  - Build
  - Analysis
  - Deploy

variables:
  IMAGE_BASE: ${CI_REGISTRY}/kwinft/ci-images/archlinux/frameworks-master:latest

workflow:
  rules:
    - when: always

include:
  - project: kwinft/tooling
    ref: master
    file:
      - '/analysis/gitlab-ci/static.yml'
      - '/analysis/gitlab-ci/tests.yml'
      - '/docs/gitlab-ci/commits.yml'


####################################################################################################
#
# Compliance
#

Message Lint:
  extends: .message-lint
  stage: Compliance

Clang-Format:
  extends: .clang-format
  stage: Compliance
  image: ${IMAGE_BASE}


####################################################################################################
#
# Build
#

Coverity Scan:
  extends: .coverity-scan
  stage: Build
  image: ${IMAGE_BASE}
  variables:
    PROJECT_NAME: Wrapland

.common-build:
  variables:
    CMAKE_ARGS: ''
  stage: Build
  image: ${IMAGE_BASE}
  rules:
    - if: '$COVERITY_SCAN_RUN'
      when: never
    - when: on_success
  script:
    - mkdir build && cd build
    - cmake -DCMAKE_INSTALL_PREFIX:PATH=/usr $CMAKE_ARGS ../
    - make -j$(nproc)
    - make install -j$(nproc)
  artifacts:
    paths:
      - build
    expire_in: 1 week

Regular:
  extends: .common-build
  variables:
    CMAKE_ARGS: -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
                -DCMAKE_CXX_FLAGS=--coverage -DCMAKE_EXE_LINKER_FLAGS=--coverage
                -DCMAKE_C_COMPILER=clang
                -DCMAKE_CXX_COMPILER=clang++

Sanitized:
  extends: .common-build
  variables:
    CMAKE_ARGS: -DECM_ENABLE_SANITIZERS='address;leak;undefined'
                -DCMAKE_C_COMPILER=clang
                -DCMAKE_CXX_COMPILER=clang++


####################################################################################################
#
# Analysis
#

Clang-Tidy:
  extends: .clang-tidy
  stage: Analysis
  image: ${IMAGE_BASE}
  needs:
    - job: Regular
      artifacts: true


.common-test: &common-test
  stage: Analysis
  image: ${IMAGE_BASE}

Regular Tests:
  extends: .tests-with-coverage
  variables:
    GCOVR_ARGS: --gcov-executable '/usr/bin/llvm-cov gcov' -e tests
  <<: *common-test
  needs:
    - job: Regular
      artifacts: true

Sanitized Tests:
  extends: .tests
  <<: *common-test
  needs:
    - job: Sanitized
      artifacts: true
  script:
    - export ASAN_OPTIONS=detect_odr_violation=0
    - !reference [.tests, script]


####################################################################################################
#
# Deploy
#

Add Coverage:
  extends: .add-coverage
  variables:
    COVERAGE_JOB: Regular Tests
  stage: Deploy

pages:
  extends: .pages-coverage
  stage: Deploy
  needs:
    - job: Regular Tests
      artifacts: true

Master Image:
  stage: Deploy
  rules:
    - if: '$COVERITY_SCAN_RUN'
      when: never
    - if: '$CI_PROJECT_NAMESPACE == "kwinft" && $CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE == "push"'
      when: on_success
    - when: never
  variables:
    TARGET_ID: 17539846
  script: curl --request POST --form token=${CI_JOB_TOKEN} --form ref=master
            --form "variables[TRIGGER_TYPE]=wrapland_rebuild"
            ${CI_API_V4_URL}/projects/${TARGET_ID}/trigger/pipeline

Stable Image:
  stage: Deploy
  rules:
    - if: '$COVERITY_SCAN_RUN'
      when: never
    - if: '$CI_PROJECT_NAMESPACE == "kwinft" && $CI_COMMIT_BRANCH =~ /^Plasma\// && $CI_PIPELINE_SOURCE == "push"'
      when: on_success
    - when: never
  variables:
    TARGET_ID: 17539846
  script: curl --request POST --form token=${CI_JOB_TOKEN} --form ref=master
            --form "variables[TRIGGER_TYPE]=wrapland_rebuild"
            --form "variables[PLASMA_VERSION]=${CI_COMMIT_BRANCH}"
            ${CI_API_V4_URL}/projects/${TARGET_ID}/trigger/pipeline

Tagged Image:
  stage: Deploy
  rules:
    - if: '$COVERITY_SCAN_RUN'
      when: never
    - if: '$CI_PROJECT_NAMESPACE == "kwinft" && $CI_COMMIT_TAG =~ /^wrapland@/ && $CI_PIPELINE_SOURCE == "push"'
      when: on_success
    - when: never
  variables:
    TARGET_ID: 17539846
  script:
    # Get Plasma version from commit tag.
    - BRANCH_NAME=$(echo "${CI_COMMIT_TAG}" | sed -e 's,wrapland@\(\),\1,g' | sed -e 's,0.\(.\)\([^\.]*\).*,Plasma/\1.\2,g')
    - echo $BRANCH_NAME
    - curl --request POST --form token=${CI_JOB_TOKEN} --form ref=master
            --form "variables[TRIGGER_TYPE]=wrapland_rebuild"
            --form "variables[WRAPLAND_TAG]=${CI_COMMIT_TAG}"
            --form "variables[PLASMA_VERSION]=${BRANCH_NAME}"
            ${CI_API_V4_URL}/projects/${TARGET_ID}/trigger/pipeline
