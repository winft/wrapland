<?xml version="1.0" encoding="UTF-8"?>
<protocol name="kwinft_output_management_unstable_v1">
    <copyright><![CDATA[
        Copyright © 2008-2011 Kristian Høgsberg
        Copyright © 2010-2011 Intel Corporation
        Copyright © 2012-2013 Collabora, Ltd.
        Copyright © 2015 Sebastian Kügler <sebas@kde.org>
        Copyright © 2020 Roman Gilg <subdiff@gmail.com>

        Permission to use, copy, modify, distribute, and sell this
        software and its documentation for any purpose is hereby granted
        without fee, provided that the above copyright notice appear in
        all copies and that both that copyright notice and this permission
        notice appear in supporting documentation, and that the name of
        the copyright holders not be used in advertising or publicity
        pertaining to distribution of the software without specific,
        written prior permission.  The copyright holders make no
        representations about the suitability of this software for any
        purpose.  It is provided "as is" without express or implied
        warranty.

        THE COPYRIGHT HOLDERS DISCLAIM ALL WARRANTIES WITH REGARD TO THIS
        SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
        FITNESS, IN NO EVENT SHALL THE COPYRIGHT HOLDERS BE LIABLE FOR ANY
        SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
        WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN
        AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
        ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF
        THIS SOFTWARE.
    ]]></copyright>

    <interface name="zkwinft_output_management_v1" version="1">
        <description summary="configuration of server outputs through clients">
            This interface enables clients to set properties of output devices for screen
            configuration purposes via the server. To this end output devices are referenced
            by global zkwinft_output_device_v1 objects.

            output_management (wl_global)
            --------------------------
            request:
            * create_configuration -> output_configuration (wl_resource)

            output_configuration (wl_resource)
            --------------------------
            requests:
            * enable(output_device, bool)
            * mode(output_device, mode_id)
            * transformation(output_device, flag)
            * position(output_device, x, y)
            * apply

            events:
            * applied
            * failed

            The server registers one output_management object as a global object. In order
            to configure outputs a client requests create_configuration, which provides a
            resource referencing an output_configuration for one-time configuration. That
            way the server knows which requests belong together and can group them by that.

            On the output_configuration object the client calls for each output whether the
            output should be enabled, which mode should be set (by referencing the mode from
            the list of announced modes) and the output's global position. Once all outputs
            are configured that way, the client calls apply.
            At that point and not earlier the server should try to apply the configuration.
            If this succeeds the server emits the applied signal, otherwise the failed
            signal, such that the configuring client is noticed about the success of its
            configuration request.

            Through this design the interface enables atomic output configuration changes if
            internally supported by the server.
        </description>

        <request name="create_configuration">
            <description summary="provide output_configuration object for configuring outputs">
                Request an output_configuration object through which the client can configure
                output devices.
            </description>
            <arg name="id" type="new_id" interface="zkwinft_output_configuration_v1"/>
        </request>

    </interface>

    <interface name="zkwinft_output_configuration_v1" version="1">
        <description summary="configure single output devices">
            output_configuration is a client-specific resource that can be used to ask
            the server to apply changes to available output devices.

            The client receives a list of output devices from the registry. When it wants
            to apply new settings, it creates a configuration object from the
            output_management global, writes changes through this object's enable, scale,
            transform and mode calls. It then asks the server to apply these settings in
            an atomic fashion, for example through Linux' DRM interface.

            The server signals back whether the new settings have applied successfully
            or failed to apply. output_device objects are updated after the changes have been
            applied to the hardware and before the server side sends the applied event.
        </description>

        <request name="destroy" type="destructor">
          <description summary="unbind from the presentation interface">
            Informs the server that the client will no longer be using this
            protocol object. Existing objects created by this object are not
            affected.
          </description>
        </request>

        <request name="enable">
            <description summary="enable or disable an output">
                Mark the output as enabled or disabled.
            </description>
            <arg name="output_device" type="object" interface="zkwinft_output_device_v1"
                 summary="output device to be en- or disabled"/>
            <arg name="enable" type="int"
                 summary="1 to enable or 0 to disable this output"/>
        </request>

        <request name="mode">
            <description summary="switch output device to mode">
                Sets the mode for a given output by its mode size (width and height) and refresh
                rate.
            </description>
            <arg name="output_device" type="object" interface="zkwinft_output_device_v1"
                 summary="output device this mode change applies to"/>
            <arg name="mode_id" type="int" summary="aspired mode's id"/>
        </request>

        <request name="transform">
            <description summary="transform output_device">
                Sets the transformation for a given output.
            </description>
            <arg name="output_device" type="object" interface="zkwinft_output_device_v1"
                 summary="output device this transformation change applies to"/>
            <arg name="transform" type="int" summary="transform enum"/>
        </request>

        <enum name="error">
            <entry name="bad_value" value="0" summary="unallowed value has been requested"/>
            <entry name="already_applied" value="1" summary=""/>
        </enum>

        <request name="geometry">
            <description summary="set output geometry in global space">
                Set the rectangle this output device maps in compositor space, where (x,y) describe
                the top-left corner of the rectangle and its size is described by width and height.

                When width and height are both set to 0, no new content is posted to the output what
                implicitly disables it.

                The x, width and height argument must be non-negative and width must be 0 if and
                only if height is 0. Otherwise the bad_value protocol error is raised.
            </description>
            <arg name="output_device" type="object" interface="zkwinft_output_device_v1"
                 summary="output device this geometry applies to"/>
            <arg name="x" type="fixed"
                 summary="x position within the global compositor space"/>
            <arg name="y" type="fixed"
                 summary="y position within the global compositor space"/>
            <arg name="width" type="fixed"
                 summary="logical width of the output in global compositor space"/>
            <arg name="height" type="fixed"
                 summary="logical height of the output in global compositor space"/>
        </request>

        <request name="apply">
            <description summary="apply configuration changes to all output devices">
                Asks the server to apply property changes requested through this output_configuration
                object to all outputs on the server side.

                After this request has been issued there will guaranteed either the applied or the
                failed event be received but no other request must be send on this object. The
                object may only be destroyed anymore. Otherwise the already_applied protocol error
                will be raised.
            </description>
        </request>

        <event name="applied">
            <description summary="configuration changes have been applied">
                Sent after the server has successfully applied the changes.
            </description>
        </event>

        <event name="failed">
            <description summary="configuration changes failed to apply">
                Sent if the server rejects the changes or failed to apply them.
            </description>
        </event>

    </interface>
</protocol>
